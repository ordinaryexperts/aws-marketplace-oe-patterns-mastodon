from aws_cdk import (
    Aws,
    CfnDeletionPolicy,
    CfnMapping,
    Stack,
    aws_logs
)
from constructs import Construct

from oe_patterns_cdk_common.alb import Alb
from oe_patterns_cdk_common.asg import Asg
from oe_patterns_cdk_common.db_secret import DbSecret
from oe_patterns_cdk_common.dns import Dns
from oe_patterns_cdk_common.vpc import Vpc
from oe_patterns_cdk_common.aurora_postgresql import AuroraPostgresql

# AMI list generated by ami-ec2-build
AMI_ID="ami-017783f7c02f42bd0"
AMI_NAME="ordinary-experts-patterns-mastodon--20221001-0834"
generated_ami_ids = {
    "us-east-1": "ami-017783f7c02f42bd0"
}
# End generated code block.

class MastodonStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # vpc
        vpc = Vpc(
            self,
            "Vpc"
        )

        # db_secret
        db_secret = DbSecret(
            self,
            "DbSecret"
        )

        # asg
        with open("mastodon/launch_config_user_data.sh") as f:
            launch_config_user_data = f.read()
        asg = Asg(
            self,
            "Asg",
            default_instance_type = "t3.xlarge",
            secret_arn=db_secret.secret_arn(),
            user_data_contents=launch_config_user_data,
            user_data_variables = {
                "DbSecretArn": db_secret.secret_arn(),
                "HostnameParameterName": Aws.STACK_NAME + "-hostname"
            },
            vpc=vpc
        )

        ami_mapping={ "AMI": { "OEAMI": AMI_NAME } }
        for region in generated_ami_ids.keys():
            ami_mapping[region] = { "AMI": generated_ami_ids[region] }
        aws_ami_region_map = CfnMapping(
            self,
            "AWSAMIRegionMap",
            mapping=ami_mapping
        )

        alb = Alb(self, "Alb", asg=asg, vpc=vpc)
        asg.asg.target_group_arns = [ alb.target_group.ref ]

        db = AuroraPostgresql(
            self,
            "Db",
            asg=asg,
            db_secret=db_secret,
            vpc=vpc
        )
        asg.asg.node.add_dependency(db.db_primary_instance)
        
        dns = Dns(self, "Dns", alb=alb)
