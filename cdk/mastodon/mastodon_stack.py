import os

from aws_cdk import (
    Aws,
    aws_iam,
    aws_lambda,
    aws_logs,
    aws_secretsmanager,
    aws_ses,
    CfnDeletionPolicy,
    CfnMapping,
    CfnParameter,
    CustomResource,
    Stack,
    Token
)
from constructs import Construct

from oe_patterns_cdk_common.alb import Alb
from oe_patterns_cdk_common.asg import Asg
from oe_patterns_cdk_common.db_secret import DbSecret
from oe_patterns_cdk_common.dns import Dns
from oe_patterns_cdk_common.vpc import Vpc
from oe_patterns_cdk_common.aurora_cluster import AuroraPostgresql

# AMI list generated by ami-ec2-build
AMI_ID="ami-017783f7c02f42bd0"
AMI_NAME="ordinary-experts-patterns-mastodon--20221001-0834"
generated_ami_ids = {
    "us-east-1": "ami-017783f7c02f42bd0"
}
# End generated code block.

class MastodonStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # vpc
        vpc = Vpc(
            self,
            "Vpc"
        )

        self.mastodon_name_param = CfnParameter(
            self,
            "MastodonName",
            default="Mastodon",
            description="The name of this Mastodon site."
        )
        self.mastodon_name_param.override_logical_id("MastodonName")
        self.mastodon_email_param = CfnParameter(
            self,
            "MastodonEmail",
            description="The email address of this Mastodon site. This will be set up as an SES identity."
        )
        self.mastodon_email_param.override_logical_id("MastodonEmail")

        # ses
        self.mastodon_email_identity = aws_ses.CfnEmailIdentity(
            self,
            "MastodonEmailIdentity",
            email_identity=self.mastodon_email_param.value_as_string
        )

        # iam user for ses
        self.ses_user = aws_iam.CfnUser(
            self,
            "SesUser",
            path="/",
            policies=[
                aws_iam.CfnUser.PolicyProperty(
                    policy_document=aws_iam.PolicyDocument(
                        statements=[
                            aws_iam.PolicyStatement(
                                effect=aws_iam.Effect.ALLOW,
                                actions=[ "ses:SendRawEmail" ],
                                resources=[f"arn:aws:ses:{Aws.REGION}:{Aws.ACCOUNT_ID}:identity/{self.mastodon_email_param.value_as_string}"]
                            )
                        ]
                    ),
                    policy_name="AllowSendRawEmail"
                )
            ],
            user_name=f"{Aws.REGION}-{Aws.STACK_NAME}-ses"
        )
        self.ses_user.override_logical_id("SesUser")

        self.ses_user_access_key = aws_iam.AccessKey(
            self,
            "SesUserAccessKey",
            user=self.ses_user
        )
        lambda_code_path = os.path.join(
            os.path.dirname(os.path.abspath(__file__)),
            "lambda_ses_user_generate_smtp_password.py"
        )
        with open(lambda_code_path) as f:
            lambda_code = f.read()
        self.generate_smtp_password_lambda = aws_lambda.Function(
            self,
            "SesUserGenerateSMTPPasswordLambda",
            runtime=aws_lambda.Runtime.PYTHON_3_8,
            handler="index.handler",
            code=aws_lambda.Code.from_inline(lambda_code)
        )
        self.generate_smtp_password_lambda.node.default_child.override_logical_id("SesUserGenerateSMTPPasswordLambda")
        self.generate_smtp_password_lambda.role.node.default_child.override_logical_id("SesUserGenerateSMTPPasswordLambdaRole")

        self.generate_smtp_password_lambda_secret_policy = aws_iam.Policy(
            self,
            "SecretPolicy",
            statements=[
                aws_iam.PolicyStatement(
                    actions=["secretsmanager:CreateSecret"],
                    resources=["*"],
                    conditions={
                        "StringEquals": {
                            "secretsmanager:Name": [f"{Aws.STACK_NAME}/smtp/credentials"]
                        }
                    }
                ),
                aws_iam.PolicyStatement(
                    actions=["secretsmanager:ListSecrets"],
                    resources=["*"]
                )
            ]
        )
        self.generate_smtp_password_lambda_secret_policy.node.default_child.override_logical_id("SesUserCreateSecretPolicy")
        self.generate_smtp_password_lambda.role.attach_inline_policy(self.generate_smtp_password_lambda_secret_policy)
        self.generate_smtp_password_custom_resource = CustomResource(
            self,
            "GenerateSMTPPasswordCustomResource",
            service_token=self.generate_smtp_password_lambda.function_arn,
            properties={
                "access_key_id": self.ses_user_access_key.access_key_id,
                "aws_region": Aws.REGION,
                "secret_access_key": self.ses_user_access_key.secret_access_key,
                "stack_name": Aws.STACK_NAME,
                "test": "test4"
            }
        )
        self.generate_smtp_password_custom_resource.node.default_child.override_logical_id("GenerateSMTPPasswordCustomResource")

        # db_secret
        db_secret = DbSecret(
            self,
            "DbSecret"
        )

        # asg
        with open("mastodon/launch_config_user_data.sh") as f:
            launch_config_user_data = f.read()
        asg = Asg(
            self,
            "Asg",
            default_instance_type = "t3.xlarge",
            secret_arns=[db_secret.secret_arn(), self.generate_smtp_password_custom_resource.get_att('arn')],
            user_data_contents=launch_config_user_data,
            user_data_variables = {
                "DbSecretArn": db_secret.secret_arn(),
                "HostnameParameterName": Aws.STACK_NAME + "-hostname",
                "SmtpCredentialsSecretName": Aws.STACK_NAME + "/smtp/credentials"
            },
            vpc=vpc
        )

        ami_mapping={ "AMI": { "OEAMI": AMI_NAME } }
        for region in generated_ami_ids.keys():
            ami_mapping[region] = { "AMI": generated_ami_ids[region] }
        aws_ami_region_map = CfnMapping(
            self,
            "AWSAMIRegionMap",
            mapping=ami_mapping
        )

        alb = Alb(
            self,
            "Alb",
            asg=asg,
            health_check_path = "/health",
            vpc=vpc
        )

        asg.asg.target_group_arns = [ alb.target_group.ref ]

        db = AuroraPostgresql(
            self,
            "Db",
            asg=asg,
            db_secret=db_secret,
            vpc=vpc
        )
        asg.asg.node.add_dependency(db.db_primary_instance)
        asg.asg.node.add_dependency(self.generate_smtp_password_custom_resource)
        
        dns = Dns(self, "Dns", alb=alb)
