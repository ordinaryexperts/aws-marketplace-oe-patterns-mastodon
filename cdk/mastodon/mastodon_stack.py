from aws_cdk import (
    aws_logs,
    CfnDeletionPolicy,
    Stack
)
from constructs import Construct

from oe_patterns_cdk_common.asg import Asg
from oe_patterns_cdk_common.util import Util
from oe_patterns_cdk_common.vpc import Vpc

# AMI list generated by:
# make AMI_ID=ami-07bb5101b6910f67d ami-ec2-copy
# on Mon Mar 14 19:44:16 UTC 2022.
AMI_ID="ami-03afe0ebe42ebb228"
AMI_NAME="test"
generated_ami_ids = {
    "us-east-1": "ami-03afe0ebe42ebb228"
}
# End generated code block.

class MastodonStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # vpc
        vpc = Vpc(
            self,
            "Vpc"
        )

        # cloudwatch
        app_log_group = aws_logs.CfnLogGroup(
            self,
            "AppLogGroup",
            retention_in_days=TWO_YEARS_IN_DAYS
        )
        app_log_group.cfn_options.update_replace_policy = CfnDeletionPolicy.RETAIN
        app_log_group.cfn_options.deletion_policy = CfnDeletionPolicy.RETAIN
        system_log_group = aws_logs.CfnLogGroup(
            self,
            "SystemLogGroup",
            retention_in_days=TWO_YEARS_IN_DAYS
        )
        system_log_group.cfn_options.update_replace_policy = CfnDeletionPolicy.RETAIN
        system_log_group.cfn_options.deletion_policy = CfnDeletionPolicy.RETAIN

        # asg
        with open("mastodon/launch_config_user_data.sh") as f:
            launch_config_user_data = f.read()
        asg = Asg(
            self,
            "Asg",
            default_instance_type = "t3.xlarge",
            log_group_arns = [
                app_log_group.attr_arn,
                system_log_group.attr_arn
            ],
            user_data_contents=launch_config_user_data,
            user_data_variables = {},
            vpc=vpc
        )

        ami_mapping={ "AMI": { "OEAMI": AMI_NAME } }
        for region in generated_ami_ids.keys():
            ami_mapping[region] = { "AMI": generated_ami_ids[region] }
        aws_ami_region_map = CfnMapping(
            self,
            "AWSAMIRegionMap",
            mapping=ami_mapping
        )

        alb = Alb(self, "Alb", asg=asg, vpc=vpc)
        asg.asg.target_group_arns = [ alb.https_target_group.ref ]

        dns = Dns(self, "Dns", alb=alb)
