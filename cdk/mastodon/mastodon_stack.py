import os

from aws_cdk import (
    Arn,
    ArnComponents,
    Aws,
    aws_ec2,
    aws_iam,
    aws_lambda,
    aws_route53,
    aws_s3,
    aws_ses,
    CfnCondition,
    CfnDeletionPolicy,
    CfnMapping,
    CfnOutput,
    CfnParameter,
    CustomResource,
    Fn,
    Stack,
    Token
)
from constructs import Construct

from oe_patterns_cdk_common.alb import Alb
from oe_patterns_cdk_common.asg import Asg
from oe_patterns_cdk_common.aurora_cluster import AuroraPostgresql
from oe_patterns_cdk_common.db_secret import DbSecret
from oe_patterns_cdk_common.dns import Dns
from oe_patterns_cdk_common.elasticache_cluster import ElasticacheRedis
from oe_patterns_cdk_common.open_search_service import OpenSearchService
from oe_patterns_cdk_common.ses import Ses
from oe_patterns_cdk_common.util import Util
from oe_patterns_cdk_common.vpc import Vpc

# AMI list generated by ami-ec2-build
AMI_ID="ami-04d9f4e79adb5b2ad"
AMI_NAME="ordinary-experts-patterns-mastodon--20221026-0542"
generated_ami_ids = {
    "us-east-1": "ami-04d9f4e79adb5b2ad"
}
# End generated code block.

class MastodonStack(Stack):

    def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
        super().__init__(scope, construct_id, **kwargs)

        # vpc
        vpc = Vpc(
            self,
            "Vpc"
        )

        self.name_param = CfnParameter(
            self,
            "Name",
            default="Mastodon",
            description="The name of this Mastodon site."
        )
        self.assets_bucket_name_param = CfnParameter(
            self,
            "AssetsBucketName",
            default="",
            description="The name of the S3 bucket to store uploaded assets. If not specified, a bucket will be created."
        )
        self.assets_bucket_name_not_exists_condition = CfnCondition(
            self,
            "AssetsBucketNameNotExists",
            expression=Fn.condition_equals(self.assets_bucket_name_param.value, "")
        )
        self.assets_bucket = aws_s3.CfnBucket(
            self,
            "AssetsBucket",
            access_control="Private",
            bucket_encryption=aws_s3.CfnBucket.BucketEncryptionProperty(
                server_side_encryption_configuration=[
                    aws_s3.CfnBucket.ServerSideEncryptionRuleProperty(
                        server_side_encryption_by_default=aws_s3.CfnBucket.ServerSideEncryptionByDefaultProperty(
                            sse_algorithm="AES256"
                        )
                    )
                ]
            ),
        )
        self.assets_bucket.cfn_options.condition=self.assets_bucket_name_not_exists_condition
        self.assets_bucket.cfn_options.deletion_policy = CfnDeletionPolicy.RETAIN
        self.assets_bucket.cfn_options.update_replace_policy = CfnDeletionPolicy.RETAIN
        self.assets_bucket_arn = Arn.format(
            components=ArnComponents(
                account="",
                region="",
                resource=Token.as_string(
                    Fn.condition_if(
                        self.assets_bucket_name_not_exists_condition.logical_id,
                        self.assets_bucket.ref,
                        self.assets_bucket_name_param.value_as_string
                    )
                ),
                resource_name="*",
                service="s3"
            ),
            stack=self
        )

        # dns
        dns = Dns(self, "Dns")

        # add permissions for s3 bucket to SES instance user
        s3_bucket_user_policy = aws_iam.CfnUser.PolicyProperty(
            policy_document=aws_iam.PolicyDocument(
                statements=[
                    aws_iam.PolicyStatement(
                        effect=aws_iam.Effect.ALLOW,
                        actions=[
                            "s3:*"
                        ],
                        resources=[ f"{self.assets_bucket_arn}/*" ]
                    ),
                    aws_iam.PolicyStatement(
                        effect=aws_iam.Effect.ALLOW,
                        actions=[
                            "s3:ListBucket"
                        ],
                        resources=[ self.assets_bucket_arn ]
                    )
                ]
            ),
            policy_name="AllowAssetsBucket"
        )

        ses = Ses(
            self,
            "Ses",
            hosted_zone_name=dns.route_53_hosted_zone_name_param.value_as_string,
            additional_iam_user_policies=[s3_bucket_user_policy]
        )

        # db_secret
        db_secret = DbSecret(
            self,
            "DbSecret"
        )

        # redis
        redis = ElasticacheRedis(
            self,
            "Redis",
            vpc=vpc
        )

        # Open Search Service
        oss = OpenSearchService(
            self,
            "OpenSearchService",
            vpc=vpc
        )

        asg_update_secret_policy = aws_iam.CfnRole.PolicyProperty(
            policy_document=aws_iam.PolicyDocument(
                statements=[
                    aws_iam.PolicyStatement(
                        effect=aws_iam.Effect.ALLOW,
                        actions=[
                            "secretsmanager:UpdateSecret"
                        ],
                        resources=[
                            f"arn:{Aws.PARTITION}:secretsmanager:{Aws.REGION}:{Aws.ACCOUNT_ID}:secret:{Aws.STACK_NAME}/instance/credentials-*"
                        ]
                    )
                ]
            ),
            policy_name="AllowUpdateInstanceSecret"
        )

        # asg
        with open("mastodon/launch_config_user_data.sh") as f:
            launch_config_user_data = f.read()
        asg = Asg(
            self,
            "Asg",
            additional_iam_role_policies=[asg_update_secret_policy],
            default_instance_type="t3.xlarge",
            secret_arns=[db_secret.secret_arn(), ses.secret_arn()],
            user_data_contents=launch_config_user_data,
            user_data_variables={
                "DbSecretArn": db_secret.secret_arn(),
                "Hostname": dns.hostname(),
                "HostedZoneName": dns.route_53_hosted_zone_name_param.value_as_string,
                "InstanceSecretName": Aws.STACK_NAME + "/instance/credentials"
            },
            vpc=vpc
        )

        # add permissions for instance role to update instance secret

        ami_mapping={ "AMI": { "OEAMI": AMI_NAME } }
        for region in generated_ami_ids.keys():
            ami_mapping[region] = { "AMI": generated_ami_ids[region] }
        aws_ami_region_map = CfnMapping(
            self,
            "AWSAMIRegionMap",
            mapping=ami_mapping
        )

        alb = Alb(
            self,
            "Alb",
            asg=asg,
            health_check_path = "/health",
            vpc=vpc
        )

        asg.asg.target_group_arns = [ alb.target_group.ref ]

        db = AuroraPostgresql(
            self,
            "Db",
            db_secret=db_secret,
            vpc=vpc
        )
        asg.asg.node.add_dependency(db.db_primary_instance)
        asg.asg.node.add_dependency(ses.generate_smtp_password_custom_resource)

        oss_ingress   = Util.add_sg_ingress(oss, asg.sg)
        redis_ingress = Util.add_sg_ingress(redis, asg.sg)
        db_ingress    = Util.add_sg_ingress(db, asg.sg)
        
        dns.add_alb(alb)
